// @author Marcelo Miranda Carneiro - mcarneiro@gmail.com
// @version 0.3

// Usage
// @include register-grid(wide, 1306px, 14, 10px, auto);

$gs-labels:               desktop  !default;
$gs-site-width:           1000px   !default;
//$gs-column-width:       84px     !default; //column-width is a optional way of setting units that should will override site-width
$gs-column-num:           14       !default;
$gs-width-break-point:    1700px   !default;
$gs-gutter-width:         10px     !default;

// PRIVATE //

// UTIL stuff
// Get values by label
@function gs-index-of ($item, $list) {
	$count: 0;
	@each $curr in $list {
		$count: $count+1;
		@if $curr == $item {
			@return $count;
		}
	}
	@return -1;
}

@function gs-label-exists ($grid) {
	@if gs-index-of($grid, $gs-labels) < 0 {
		@warn "[gs-label-exists] Media \"#{$grid}\" was not found.";
		@return 0;
	}
	@return 1;
}
// Get values by label
@function gs-value ($label: nth($gs-labels, 1), $l: $gs-column-width) {
	@if gs-label-exists($label) == 0 {
		@return null;
	}
	$count: 0;
	@each $item in $gs-labels {
		$count: $count + 1;
		@if $label == $item {
			@if $count > length($l) {
				$count: 1;
			}
			@return nth($l, $count);
		}
	}
	@return null;
}

// convert to unit-less number
@function gs-to-number ($value) {
	@if unit($value) == "%" {
		@return $value / 1%;
	} @else if unit($value) == "px" {
		@return $value / 1px;
	} @else if unit($value) == "in" {
		@return $value / 1in;
	} @else if unit($value) == "em" {
		@return $value / 1em;
	} @else if unit($value) == "rem" {
		@return $value / 1rem;
	}
}

@function gs-get-column-size ($grid) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$gs-column-width: null !default;
	$gs-site-width: null !default;
	$cols: gs-value($grid, $gs-column-num);
	$g: gutter(1, $grid);
	$width: 0;

	@if $gs-column-width != null {
		$width: gs-value($grid, $gs-column-width);
	} @else if $gs-site-width != null {
		// ([site width] - ([gutter] * ([columns] - 1))) / [columns]
		$width: (gs-value($grid, $gs-site-width) - ($g * ($cols - 1))) / $cols;
	}
	@return $width;
}

// write a fixed (px) column based on "media" $gs-column-num
// $n:[1] number of columns (if none is passed, considers 1)
// $grid:[first defined media] the name of configured media to fetch data
// $extra:[0] extra size do be added (or removed) to the return value
@function gs-fixed-column ($n: 1, $grid: gs-value($l: $gs-labels), $extra: 0) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$width: gs-get-column-size($grid);
	$cols: gs-value($grid, $gs-column-num);
	$g: gutter(1, $grid);
	@if $n > $cols {
		$n: $cols
	}
	@return (($g + $width) * $n) - $g + $extra;
}

// write a fluid (%) column based on "media" $gs-column-num. No "gutter" is considered on the calculations
// $n:[1] number of columns (if none is passed, considers 1)
// $grid:[first defined media] the name of configured media to fetch data
@function fluid-column ($n: 1, $grid: gs-value($l: $gs-labels)) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$cols: gs-value($grid, $gs-column-num);
	@if $n > $cols {
		$n: $cols
	}
	$width: $n / $cols * 100; //gs-to-number(gs-value($grid, $gs-site-width))

	@return $width;
}


// PUBLIC //

// Register grid system
@mixin clear-grid-list () {
	$gs-labels: null;
	$gs-site-width: null;
	$gs-column-num: null;
	$gs-width-break-point: null;
	$gs-gutter-width: null;
}
@mixin register-grid ($label, $width, $column-num, $gutter, $break-point: auto, $column: auto) {
	@if gs-index-of($label, $gs-labels) < 0 {

		// if site-width is auto, column-num, gutter-width and column-width must have values
		@if $width == auto {
			@if type-of($column-num) == number {
				@if type-of($gutter) == number {
					@if type-of($column) == number {
						$width: $column-num * $column + ($column-num - 1) * $gutter;
					}
				}
			}
		}

		// if gutter-width is auto, column-num, site-width and column-width must have values
		@if $gutter == auto {
			@if type-of($width) == number {
				@if type-of($column) == number {
					@if $column-num == auto {
						$column-num: floor($width / $column);
					}
					$gutter: ($width - $column * $column-num) / ($column-num - 1);
				}
			}
		}

		@if $gs-labels == null {
			$gs-labels: $label;
			$gs-site-width: $width;
			$gs-column-num: $column-num;
			$gs-gutter-width: $gutter;
			$gs-width-break-point: $break-point;
		} @else {
			$gs-labels: append($gs-labels, $label);
			$gs-site-width: append($gs-site-width, $width);
			$gs-column-num: append($gs-column-num, $column-num);
			$gs-gutter-width: append($gs-gutter-width, $gutter);
			$gs-width-break-point: append($gs-width-break-point, $break-point);
		}
	}
}

// Get gutter value
@function gutter ($n: 1, $grid: gs-value($l: $gs-labels)) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	@return gs-to-number(gs-value($grid, $gs-gutter-width)) * $n * 1px;
}

// Get column value
@function column ($n: 1, $grid: gs-value($l: $gs-labels), $extra: 0) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$gs-column-width: null !default;
	$gs-site-width: null !default;
	$width: 0;

	@if $n == "all" {
		$n: gs-value($grid, $gs-column-num);
	}

	// @debug "is? #{$grid} / #{unit(gs-value($grid, $gs-site-width))}";

	@if gs-value($grid, $gs-site-width) != null {
		@if unit(gs-value($grid, $gs-site-width)) == "%" {
			@return fluid-column($n, $grid) * 1%;
		}
	}
	@return gs-fixed-column($n, $grid, $extra);
}

// get row css properties
@mixin row ($width: auto, $grid: gs-value($l: $gs-labels)) {
	@if $width != auto {
		@if unit($width) == "%" {
			width: auto;
		} @else {
			width: $width + gutter($grid: $grid);
		}
	}
	margin-left: gutter(-1, $grid);
}

// get media query css wrapper
@mixin media-query ($grid: gs-value($l: $gs-labels), $media: screen, $type: min-width) {
	$break-point: gs-value($grid, $gs-width-break-point);
	@if $break-point == "auto" {
		@content
	} @else {
		@if gs-value($grid, $gs-width-break-point) != null {
			@media #{$media} and (#{$type}: gs-value($grid, $gs-width-break-point)) {
				@content
			}
		}
	}
}

// generates classes with sizes
@mixin gs-classes ($grid-list, $prefix) {
	@each $grid in $grid-list {
		$cols: gs-value($grid, $gs-column-num);
		$gutter: gs-value($grid, $gs-gutter-width);

		@include media-query($grid) {
			@for $i from 1 to $cols+1 {
				.#{$prefix}#{$i} {
					$curr: column($i, $grid: $grid);
					width: $curr;
					@if unit($curr) != "%" {
						margin-left: $gutter;
					}
				}
			}
		}
	}
}